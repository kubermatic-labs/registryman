name: ci
on:
  pull_request:
  push:
    branches:
      - 'release-*'
      - 'master'
      - 'main'
    tags:
      - 'v*'
env:
  golang-version: '1.16'
jobs:
  dockercheck:
    name: Dockerfile linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ghe-actions/dockerfile-validator@v1
      with:
        dockerfile: 'Dockerfile'
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
  check-golang:
    runs-on: ubuntu-latest
    name: Golang linter
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.40.1
          args: --timeout 10m0s --build-tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp"
  build:
    runs-on: ubuntu-latest
    name: Build binary
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ env.golang-version }}
    - run: go build -v -tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp" .
  checks:
    runs-on: ubuntu-latest
    name: Go checks
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.golang-version }}
    - name: Go vet
      run: go vet -v -tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp" ./... && git diff --exit-code
    - name: Codegen
      run: go mod vendor && hack/update-codegen.sh && git diff --exit-code
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ env.golang-version }}
    - run: go test -v ./... -race -tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp"
  nix-build:
    runs-on: ubuntu-latest
    name: Building with nix
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v16
    - run: nix-build -A docker --argstr registryman-from local

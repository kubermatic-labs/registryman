// +build !ignore_autogenerated

/*
Copyright 2021 The Kubermatic Kubernetes Platform contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.MemberStatus":          schema_pkg_apis_registryman_v1alpha1_MemberStatus(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Project":               schema_pkg_apis_registryman_v1alpha1_Project(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectList":           schema_pkg_apis_registryman_v1alpha1_ProjectList(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectMember":         schema_pkg_apis_registryman_v1alpha1_ProjectMember(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectSpec":           schema_pkg_apis_registryman_v1alpha1_ProjectSpec(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectStatus":         schema_pkg_apis_registryman_v1alpha1_ProjectStatus(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Registry":              schema_pkg_apis_registryman_v1alpha1_Registry(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryCapabilities":  schema_pkg_apis_registryman_v1alpha1_RegistryCapabilities(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryList":          schema_pkg_apis_registryman_v1alpha1_RegistryList(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistrySpec":          schema_pkg_apis_registryman_v1alpha1_RegistrySpec(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryStatus":        schema_pkg_apis_registryman_v1alpha1_RegistryStatus(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationRuleStatus": schema_pkg_apis_registryman_v1alpha1_ReplicationRuleStatus(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationTrigger":    schema_pkg_apis_registryman_v1alpha1_ReplicationTrigger(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Scanner":               schema_pkg_apis_registryman_v1alpha1_Scanner(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerList":           schema_pkg_apis_registryman_v1alpha1_ScannerList(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerSpec":           schema_pkg_apis_registryman_v1alpha1_ScannerSpec(ref),
		"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerStatus":         schema_pkg_apis_registryman_v1alpha1_ScannerStatus(ref),
	}
}

func schema_pkg_apis_registryman_v1alpha1_MemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberStatus specifies the status of a project member.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the project member.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the project membership, like user, group, robot.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "Role of the project member, like admin, developer, maintainer, etc.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dn": {
						SchemaProps: spec.SchemaProps{
							Description: "Distinguished name of the project member. Empty when omitted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "type", "role"},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_Project(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Project describes the expected state of a globalregistry Project",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectSpec"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ProjectList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectList collects Registry resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Project"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Project", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ProjectMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectMember reprensents a User, Group or Robot user of a Project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the project member, e.g. User, Group, Robot. If not set, the default value (User) is applied.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the project member",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "Role of the project member, e.g. Developer, Maintainer, etc.\n\nThe possible values depend on the value of the Type field.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"dn": {
						SchemaProps: spec.SchemaProps{
							Description: "DN is optional distinguished name of the user. Used with LDAP integration.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "role"},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ProjectSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectSpec describes the spec field of the Project resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type selects whether the project is global or local.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"localRegistries": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "LocalRegistries lists the registry names at which the local project shall be provisioned at.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"members": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Members enumerates the project members and their capabilities provisioned for the specific registry.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectMember"),
									},
								},
							},
						},
					},
					"scanner": {
						SchemaProps: spec.SchemaProps{
							Description: "Scanner specifies the name of the assigned scanner.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Description: "Trigger specifies the preferred replication trigger. If it is not possible to implement the selected replication trigger, the trigger may be overridden.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationTrigger"),
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectMember", "github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationTrigger"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ProjectStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectStatus specifies the status of a registry project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the project.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"members": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Members of the project.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.MemberStatus"),
									},
								},
							},
						},
					},
					"replicationRules": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Replication rules of the project.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationRuleStatus"),
									},
								},
							},
						},
					},
					"storageUsed": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage used by the project in bytes.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"scannerStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Scanner of the project.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerStatus"),
						},
					},
				},
				Required: []string{"name", "members", "replicationRules", "storageUsed", "scannerStatus"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.MemberStatus", "github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationRuleStatus", "github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerStatus"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_Registry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Registry describes the expected state of a registry Object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec describes the Registry Specification.",
							Ref:         ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistrySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistrySpec", "github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_RegistryCapabilities(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"canCreateProject": {
						SchemaProps: spec.SchemaProps{
							Description: "CanCreateProject shows whether the registry can create projects.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canDeleteProject": {
						SchemaProps: spec.SchemaProps{
							Description: "CanDeleteProject shows whether the registry can delete projects.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canPullReplicate": {
						SchemaProps: spec.SchemaProps{
							Description: "CanPullReplicate shows whether the registry can pull repositories from remote registries.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canPushReplicate": {
						SchemaProps: spec.SchemaProps{
							Description: "CanPushReplicate shows whether the registry can push repositories from remote registries.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canManipulateProjectMembers": {
						SchemaProps: spec.SchemaProps{
							Description: "CanManipulateProjectMembers shows whether the registry can add/remove members to the projects.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canManipulateScanners": {
						SchemaProps: spec.SchemaProps{
							Description: "CanManipulateProjectScanners shows whether the registry can add/remove scanners to the projects.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"canManipulateReplicationRules": {
						SchemaProps: spec.SchemaProps{
							Description: "CanManipulateProjectReplicationRules shows whether the registry can add/remove replication rules to the projects.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hasProjectMembers": {
						SchemaProps: spec.SchemaProps{
							Description: "HasProjectMembers shows whether the registry understands the concept of project membership.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hasProjectScanners": {
						SchemaProps: spec.SchemaProps{
							Description: "HasProjectScanners shows whether the registry understands the concept of project level vulnerability scanners.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hasProjectReplicationRules": {
						SchemaProps: spec.SchemaProps{
							Description: "HasProjectReplicationRules shows whether the registry understands the concept of project level replication rules.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hasProjectStorageReport": {
						SchemaProps: spec.SchemaProps{
							Description: "HasProjectStorageReport shows whether the registry understands the concept of project level storage reporting.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"canCreateProject", "canDeleteProject", "canPullReplicate", "canPushReplicate", "canManipulateProjectMembers", "canManipulateScanners", "canManipulateReplicationRules", "hasProjectMembers", "hasProjectScanners", "hasProjectReplicationRules", "hasProjectStorageReport"},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_RegistryList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistryList collects Registry resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Registry"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Registry", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_RegistrySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrySpec describes the specification of a Registry.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider identifies the actual registry type, e.g. Harbor, Docker Hub, etc.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "APIEndpoint identifies the registry API endpoint in a registry implementation specific way. It can be for example an HTTP endpoint, like \"http://harbor.example.com:8080\".",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username is the user name to be used during the authentication at the APIEndpoint interface.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password is the password to be used during the authentication at the APIEndpoint interface.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "Role specifies whether the registry is a Global Hub or a Local registry.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"provider", "apiEndpoint", "username", "password", "role"},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_RegistryStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistryStatus specifies the status of a registry.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projects": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectStatus"),
									},
								},
							},
						},
					},
					"capabilities": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryCapabilities"),
						},
					},
				},
				Required: []string{"projects", "capabilities"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ProjectStatus", "github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.RegistryCapabilities"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ReplicationRuleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationRuleStatus specifies the status of project replication rule.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"remoteRegistryName": {
						SchemaProps: spec.SchemaProps{
							Description: "RemoteRegistryName indicates the name of the remote registry which the current registry shall synchronize with.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Description: "Trigger describes the event that shall trigger the replication.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationTrigger"),
						},
					},
					"direction": {
						SchemaProps: spec.SchemaProps{
							Description: "Direction shows whether the replication is of type pull or push.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"remoteRegistryName", "trigger", "direction"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ReplicationTrigger"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ReplicationTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationTrigger indicates the replication trigger of a project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_Scanner(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Scanner resource describes the configuration of an external vulnerability scanner.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec describes the Scanner Specification.",
							Ref:         ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerSpec"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.ScannerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ScannerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ScannerList collects Registry resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Scanner"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubermatic-labs/registryman/pkg/apis/registryman/v1alpha1.Scanner", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ScannerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "A base URL of the scanner adapter.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessCredential": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_registryman_v1alpha1_ScannerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ScannerStatus specifies the status of a project's external vulnerability scanner.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the scanner.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the scanner.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "url"},
			},
		},
	}
}
